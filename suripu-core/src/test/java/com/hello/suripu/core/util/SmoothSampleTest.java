package com.hello.suripu.core.util;

import com.google.common.collect.ImmutableList;
import com.hello.suripu.core.models.Sample;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;


public class SmoothSampleTest {
    private static final Logger LOGGER = LoggerFactory.getLogger(SmoothSampleTest.class);

    @Test
    public void testMinuteResolutionDustValuesFromRealData() {
        final double[] values = {40.468964,40.123077,41.506634,39.604244,38.047745,40.64191,41.160744,44.44669,38.39363,37.52891,38.566578,38.220688,38.39363,40.29602,36.837135,41.333687,40.64191,42.544296,36.491245,39.4313,51.018566,39.258354,39.77719,39.77719,40.814854,41.333687,38.566578,39.08541,38.73952,39.08541,38.912464,41.85252,38.39363,43.581963,38.39363,39.4313,42.19841,38.220688,37.183025,39.4313,39.950134,36.664192,38.220688,36.664192,34.58886,40.9878,42.371353,37.874798,39.4313,40.468964,43.06313,37.874798,45.13846,39.604244,41.506634,39.950134,41.333687,41.160744,40.9878,40.814854,37.701855,43.06313,35.972412,40.468964,38.566578,43.92785,43.581963,39.604244,42.71724,65.02706,83.01327,106.87958,92.5252,86.99098,77.65199,82.66737,67.10239,65.200005,59.319893,59.838726,54.82334,68.14005,53.785675,49.635014,47.90557,47.04085,45.83024,43.409016,48.25146,43.409016,39.950134,46.176132,56.033955,43.92785,39.08541,43.409016,43.236076,41.160744,40.468964,39.950134,42.544296,44.273743,41.85252,42.71724,41.160744,42.19841,39.950134,40.468964,36.837135,41.160744,39.604244,54.13157,39.77719,39.604244,44.61963,38.047745,40.9878,40.9878,39.4313,40.814854,41.160744,36.491245,40.9878,40.123077,40.9878,39.4313,45.6573,41.506634,38.912464,40.123077,39.258354,37.35597,39.950134,42.71724,43.581963,36.837135,36.14536,50.499733,41.506634,40.29602,41.506634,40.64191,39.950134,37.01008,40.468964,40.123077,42.890182,37.874798,39.08541,36.491245,37.35597,40.9878,38.566578,41.85252,38.220688,40.64191,39.4313,38.912464,42.71724,39.4313,37.01008,40.9878,41.333687,40.814854,46.003185,40.123077,38.047745,39.604244,39.950134,40.64191,42.19841,41.160744,38.39363,37.874798,55.51512,39.77719,40.29602,39.604244,37.183025,37.35597,36.318302,40.814854,39.950134,45.83024,37.52891,44.61963,39.77719,38.566578,43.581963,38.047745,39.258354,40.123077,38.047745,42.890182,38.566578,38.566578,37.52891,39.950134,38.566578,41.506634,42.19841,38.912464,39.258354,38.566578,37.35597,38.73952,39.258354,39.258354,42.71724,39.950134,41.506634,34.242973,37.874798,40.9878,54.477455,36.837135,40.814854,52.056236,41.333687,39.08541,36.664192,37.35597,38.73952,39.258354,40.123077,37.52891,39.4313,38.912464,42.890182,39.08541,37.52891,40.814854,38.73952,40.123077,38.220688,37.52891,40.123077,37.35597,38.73952,37.01008,34.761806,36.664192,40.9878,38.912464,37.701855,37.701855,40.468964,43.06313,39.08541,39.258354,37.874798,38.047745,38.566578,40.468964,34.761806,34.58886,41.506634,43.06313,40.123077,41.160744,39.77719,38.047745,39.08541,38.566578,39.08541,40.123077,38.73952,39.950134,37.52891,38.73952,38.73952,37.874798,37.52891,40.9878,41.679577,37.183025,40.29602,37.874798,41.679577,39.604244,40.123077,40.9878,37.183025,38.73952,41.333687,43.236076,38.912464,40.814854,38.047745};
        final double[] expectedSmoothedValues = {40.584261166666664,40.41131766666667,40.699558333333336,40.411318333333334,39.719541,39.43129966666667,39.950133,42.08311466666667,41.333688,40.12307666666667,38.16303933333334,38.105392,38.393632000000004,38.970112666666665,38.50892833333334,39.488947333333336,39.604244,41.506631,39.89248366666667,39.488947,42.31370366666667,43.23607333333333,43.351369999999996,39.604244666666666,40.123078,40.64191033333333,40.238372999999996,39.66189166666667,38.797169333333336,38.97011333333334,38.912464666666665,39.95013133333333,39.719538,41.27603766666667,40.123074333333335,40.46896433333333,40.007780000000004,39.95013266666667,39.200707666666666,38.278337666666665,38.854819666666664,38.68187533333333,38.278338,37.183024,36.49124666666667,37.413617333333335,39.31600433333333,40.411317,39.892483666666664,39.258354,40.987798,40.468964,42.02546266666667,40.87250066666667,42.083112666666665,40.353670666666666,40.93015166666667,40.814855,41.16074366666667,40.987799333333335,39.834836333333335,40.526613,38.91246566666667,39.83483533333333,38.33598466666667,40.98779733333333,42.02546366666667,42.371352333333334,41.96781566666667,49.11618133333334,63.58585666666667,84.97330333333333,94.13935000000001,95.46525333333334,85.72272333333333,82.43678,75.80725,71.65658833333333,62.59606422015571,58.6134571635669,55.154568830233565,54.06902861007786,53.612730666666664,51.883288666666665,50.44208633333333,48.19381133333333,46.92555333333333,45.426702,45.830238666666666,45.023164,43.870203333333336,43.17842733333333,47.386740333333336,48.71264566666667,46.34907166666667,42.14075866666667,41.910167333333334,42.60194533333333,41.621928,40.526614,40.987798,42.25605766666667,42.89018633333333,42.94783433333333,41.910168,42.025464666666664,41.103096,40.87250266666667,39.085411,39.48894766666667,39.200707666666666,44.96551933333333,44.504334666666665,44.504334666666665,41.333688,40.757206333333336,41.21839166666667,40.007781666666666,40.46896666666667,40.411318,40.468966,39.48894766666667,39.54659633333333,39.200707333333334,40.699559,40.18072566666667,42.02546666666667,42.19841133333333,42.025466,40.180725,39.43129833333333,38.912467,38.85481933333333,40.007781333333334,42.08311233333333,41.045446,38.85481933333333,41.160742666666664,42.71724233333333,44.10079566666666,41.103096,40.81485466666667,40.69955933333333,39.200708,39.14305933333333,39.200707,41.160741,40.296019,39.95013,37.817151,37.64420833333333,38.27833833333333,38.970116,40.468966,39.546595333333336,40.23837266666667,39.431299333333335,39.66189133333334,40.353668,40.353668,39.71954,39.14306,39.777189,41.045446999999996,42.717242,42.31370533333333,41.39133566666667,39.258355333333334,39.200707666666666,40.065429333333334,40.930151333333335,41.333688,40.58426133333334,39.14305733333333,43.927849333333334,44.389036,45.19611,39.89248466666667,39.027763,38.047746333333336,36.952432333333334,38.163042,39.02776333333333,42.19840933333333,41.10309466666667,42.65959333333333,40.64191,40.987799333333335,40.641910333333335,40.06542866666667,40.296020666666664,39.14305866666667,39.14305866666667,40.353668,39.834835,40.00777933333333,38.22068866666667,38.681874,38.681874,40.007782,40.757207333333334,40.87250266666667,40.123076,38.91246533333333,38.393634,38.22068933333333,38.451281333333334,39.08540933333333,40.411316,40.64190933333333,41.391335999999995,38.566580333333334,37.87480166666666,37.701857,44.44668433333333,44.10079666666667,44.043148,43.236075,44.73492566666666,44.158444333333335,39.027763,37.701857333333336,37.586560666666664,38.451281333333334,39.37365033333333,38.97011366666667,39.027762333333335,38.62422466666667,40.411315333333334,40.29601866666667,39.834834,39.143058,39.02776133333333,39.892483666666664,39.02776166666667,38.624225,38.624225,38.335985666666666,38.73952233333333,37.701856666666664,36.837135333333336,36.14535933333333,37.471266,38.85481866666667,39.200706333333336,38.10539133333334,38.62422466666667,40.41131633333333,40.87250133333333,40.468964666666665,38.739520666666664,38.39363233333333,38.163040333333335,39.027762333333335,37.93244933333333,36.606543333333335,36.95243333333333,39.71954133333333,41.564280333333336,41.44898366666667,40.35367033333333,39.661893,38.970115,38.56657766666667,38.912466,39.258355,39.31600233333334,39.60424366666667,38.739521333333336,38.739521333333336,38.33598333333333,38.45127933333333,38.047742666666664,38.797169333333336,40.065429,39.950134,39.71954066666667,38.451281,39.950131666666664,39.71953966666667,40.468966,40.23837366666667,39.431300666666665,38.970115,39.08541066666667,41.10309433333333,41.16074233333333,40.987798,39.25835433333333};
        final double mean = new Mean().evaluate(values);
        final double stdDev = new StandardDeviation().evaluate(values, mean);
        final double[] noiseFreeValues = SmoothSample.smudgeNoise(values, mean, stdDev, SmoothSample.DEFAULT_NOISE_LENGTH_TOLERANCE);
        final double[] smoothedValues = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_HIGH_RESOLUTION);

        assertThat(expectedSmoothedValues, equalTo( smoothedValues));
    }

    @Test
    public void testHourResolutionDustValuesFromRealData() {
        final double[] values = {41.41044,42.742825,42.07663,42.457825,41.160744,41.074272,41.160744,40.55544,40.123077,40.728382,41.42016,41.852524,41.679577,41.42016,41.679577,41.074272,40.382492,40.468964,41.247215,41.679577,40.728386,40.728386,40.90133,40.468964,40.64191,40.90133,41.160744,41.593105,40.814857,40.55544,40.90133,39.863663,40.468967,41.160744,41.074272,41.50663,41.333687,40.64191,40.29602,40.728382,41.074272,41.679577,40.814854,39.08541,40.382492,41.5931,40.64191,39.950134,40.036606,30.092308,30.092308,39.950134,40.123077,40.814854,40.90133,40.9878,42.28488,42.803715,42.19841,42.025467,41.506634,41.506634,42.11194,41.247215,40.468964,40.20955,40.55544,41.50663,41.593105,40.9878,40.9878,41.766052,40.814857,40.468964,40.29602,40.036606,40.20955,40.036606,40.728382,40.20955,40.123077,40.90133,40.20955,39.344826,39.86366,40.382492,40.90133,40.814857,40.468964,40.641907,39.950134,39.344826,39.777187,40.29602,40.9878,41.074272,39.86366,39.777187,39.950134,39.69072,40.036606,39.258354,38.912468,38.73952,39.171883,39.950134,39.77719,40.64191,39.690716,39.344826,40.468964,40.036606,39.604244,39.171883,38.65305,39.344826,39.431297,38.566574,39.777187,40.90133,39.690716,39.171883,40.036606,39.950134,38.825996,38.825996,40.468967,40.641914,39.08541,38.134216,39.258354,40.382492,40.29602,40.382492,39.863663,39.517773,40.64191,40.036606,39.777187,40.123077,39.08541,39.517773,40.55544,40.90133,40.123077,39.431297,39.344826,40.036606,40.123077,39.344826,39.863663,30.481434,15.240717,26.957693,42.97666,41.247215,40.382492,40.641907,40.123077,40.036606,40.728382,40.382492,39.604244,40.555435,40.468964,38.65305,38.30716,39.171883,39.517773};
        final double[] expectedSmoothedValues = {41.743536250000005,42.0766325,42.4097275,42.267227500000004,41.809284500000004,41.117508,41.117508,40.858092,40.3392585,40.4257295,41.074271,41.636342,41.766050500000006,41.5498685,41.5498685,41.3769245,40.728381999999996,40.425728,40.8580895,41.463396,41.2039815,40.728386,40.814858,40.685147,40.555437,40.77162,41.031037,41.3769245,41.203981,40.6851485,40.728385,40.3824965,40.166315,40.8148555,41.117508,41.290451000000004,41.4201585,40.9877985,40.468965,40.512201000000005,40.901327,41.3769245,41.247215499999996,39.950131999999996,39.733951000000005,40.987796,41.117505,40.296022,39.99337,40.014988,40.02579675,40.004178749999994,40.0366055,40.468965499999996,40.858092,40.944565,41.636340000000004,42.5442975,42.5010625,42.1119385,41.7660505,41.506634,41.809287,41.67957749999999,40.8580895,40.339257,40.382495,41.031035,41.549867500000005,41.2904525,40.9878,41.376926,41.2904545,40.6419105,40.382492,40.166313,40.123078,40.123078,40.382494,40.468966,40.1663135,40.5122035,40.555440000000004,39.777187999999995,39.604243,40.123076,40.641911,40.8580935,40.6419105,40.5554355,40.2960205,39.64748,39.5610065,40.0366035,40.641909999999996,41.031036,40.468966,39.820423500000004,39.863660499999995,39.820426999999995,39.863663,39.64748,39.08541099999999,38.825993999999994,38.9557015,39.5610085,39.863662,40.20955,40.166313,39.517770999999996,39.906895,40.252785,39.820425,39.3880635,38.9124665,38.998937999999995,39.3880615,38.9989355,39.1718805,40.3392585,40.296023000000005,39.4312995,39.6042445,39.99337,39.388065,38.825996,39.6474815,40.5554405,39.863662000000005,38.609813,38.696285,39.820423,40.339256,40.339256,40.1230775,39.690718000000004,40.0798415,40.339258,39.9068965,39.950131999999996,39.6042435,39.3015915,40.0366065,40.728385,40.5122035,39.777187,39.3880615,39.690715999999995,40.0798415,39.7339515,39.6042445,35.172548500000005,33.6052405,37.858588999999995,40.982395499999996,42.111937499999996,40.8148535,40.5121995,40.382492,40.0798415,40.382494,40.555437,39.993368000000004,40.079839500000006,40.5121995,39.561007000000004,38.480105,38.7395215,39.344828};
        final double mean = new Mean().evaluate(values);
        final double stdDev = new StandardDeviation().evaluate(values, mean);
        final double[] noiseFreeValues = SmoothSample.smudgeNoise(values, mean, stdDev, SmoothSample.DEFAULT_NOISE_LENGTH_TOLERANCE);
        final double[] smoothedValues = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_LOW_RESOLUTION);

        assertThat(expectedSmoothedValues, equalTo(smoothedValues));
    }

    @Test
    public void testSmmoothWithSimpleArray() {
        final double[] values = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
        final double[] expectedValuesMovingAveragesWindowSize2 = {1.25, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5};
        final double[] expectedValuesMovingAveragesWindowSize3 = {1.5, 2.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};
        final double[] movingAveragesWindowSize2 = SmoothSample.smooth(values, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_LOW_RESOLUTION);
        final double[] movingAveragesWindowSize3 = SmoothSample.smooth(values, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_HIGH_RESOLUTION);
        assertThat(movingAveragesWindowSize2, equalTo(expectedValuesMovingAveragesWindowSize2));
        assertThat(movingAveragesWindowSize3, equalTo(expectedValuesMovingAveragesWindowSize3));
    }

    @Test
    public void testDenoiseAndSmoothWIthSimpleArrayWithOneSpike() {
        final double[] values = {100.0, 99.0, 95.0, 97.0, 92.0, 5.0, 93.0, 96.0, 93.0, 94.0};
        final double[] expectedValuesMovingAveragesWindowSize2 = {99.75, 99.5, 97.0, 96.0, 94.5, 93.0, 93.5, 94.5, 94.5, 93.5};
        final double[] expectedValuesMovingAveragesWindowSize3 = {99.0, 98.5, 98.0, 97.0, 94.66666666666667, 94.33333333333333, 93.0, 94.33333333333333, 94.0, 94.33333333333333};
        final double[] noiseFreeValues = SmoothSample.smudgeNoise(values, new Mean().evaluate(values), new StandardDeviation().evaluate(values), SmoothSample.DEFAULT_NOISE_LENGTH_TOLERANCE);
        final double[] movingAveragesWindowSize2 = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_LOW_RESOLUTION);
        final double[] movingAveragesWindowSize3 = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_HIGH_RESOLUTION);
        assertThat(movingAveragesWindowSize2, equalTo(expectedValuesMovingAveragesWindowSize2));
        assertThat(movingAveragesWindowSize3, equalTo(expectedValuesMovingAveragesWindowSize3));
    }

    @Test
    public void testDenoiseAndSmoothWIthSimpleArrayWithThreeConsecutiveSpikes() {
        final double[] values = {100.0, 99.0, 95.0, 97.0, 92.0, 5.0, 2.0, 3.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0, 93.0, 96.0, 93.0, 94.0};
        final double[] expectedValuesMovingAveragesWindowSize2 = {99.75, 99.5, 97.0, 96.0, 94.5, 48.5, 27.0, 60.75, 82.75, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5, 93.5, 94.5, 94.5, 93.5};
        final double[] expectedValuesMovingAveragesWindowSize3 = {99.0, 98.5, 98.0, 97.0, 94.66666666666667, 64.66666666666667, 48.666666666666664, 42.166666666666664, 71.5, 87.16666666666667, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333, 93.33333333333333, 94.33333333333333, 94.0, 94.33333333333333};
        final double[] noiseFreeValues = SmoothSample.smudgeNoise(values, new Mean().evaluate(values), new StandardDeviation().evaluate(values), SmoothSample.DEFAULT_NOISE_LENGTH_TOLERANCE);
        final double[] movingAveragesWindowSize2 = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_LOW_RESOLUTION);
        final double[] movingAveragesWindowSize3 = SmoothSample.smooth(noiseFreeValues, SmoothSample.DEFAULT_MOVING_AVERAGE_WINDOW_SIZE_FOR_HIGH_RESOLUTION);
        assertThat(movingAveragesWindowSize2, equalTo(expectedValuesMovingAveragesWindowSize2));
        assertThat(movingAveragesWindowSize3, equalTo(expectedValuesMovingAveragesWindowSize3));
    }

    @Test
    public void testReplaceAll() {
        final List<Sample> samples = ImmutableList.of(
                new Sample(0, (float) 0, 0),
                new Sample(1, (float) 20, 0)
        );

        final List<Sample> replace0With100 = SmoothSample.replaceAll(samples, (float) 0, (float) 100);
        assertThat(replace0With100.get(0).value, equalTo((float) 100));
        assertThat(replace0With100.get(1).value, equalTo((float) 20));

        final List<Sample> replace20With100 = SmoothSample.replaceAll(samples, (float) 20, (float) 100);
        assertThat(replace20With100.get(0).value, equalTo((float) 0));
        assertThat(replace20With100.get(1).value, equalTo((float) 100));
    }
}
