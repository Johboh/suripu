package com.hello.suripu.algorithm.partner;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.hello.suripu.algorithm.hmm.GaussianPdf;
import com.hello.suripu.algorithm.hmm.HiddenMarkovModel;
import com.hello.suripu.algorithm.hmm.HmmDecodedResult;
import com.hello.suripu.algorithm.hmm.HmmPdfInterface;

import java.util.List;

/**
 * Created by benjo on 6/16/15.
 */
public class PartnerHmm {
    //hard coded -- in the future it won't be

    private final static double [][] A =
            {{0.939504,0.0147145,0.00761931,0.0134706,0.001,0.001,0.001,0.001,0.001,0.001,0.00558065,0.00323205,0.001,0.001,0.001,0.00103156,0.001,0.00103742,0.001,0.00292667},
            {0.170153,0.786305,0.00121794,0.00105046,0.00100491,0.00547728,0.00104244,0.001,0.00101513,0.001,0.00100531,0.001,0.001,0.001,0.001,0.0217115,0.001,0.00106757,0.00101034,0.00101468},
            {0.293106,0.0012359,0.68677,0.001,0.00100109,0.00104993,0.001,0.001,0.001,0.00100114,0.00108539,0.00132767,0.0010167,0.00102589,0.001,0.0016712,0.001,0.00102573,0.001,0.00174825},
            {0.196195,0.00103038,0.0010577,0.757933,0.0228285,0.001,0.00113337,0.001,0.001,0.00100987,0.00109358,0.00273899,0.00101343,0.00100909,0.00106782,0.00469674,0.00101334,0.00112938,0.00105541,0.001009},
            {0.00104749,0.00151314,0.0103984,0.265829,0.676775,0.001,0.00107623,0.001,0.001,0.001,0.001,0.00824729,0.001,0.00293001,0.0142819,0.001,0.00101982,0.00100551,0.00108133,0.00789153},
            {0.00121806,0.00124102,0.257312,0.0665115,0.001,0.636862,0.00111468,0.0177858,0.00135412,0.001,0.00103808,0.001,0.00216765,0.001,0.00109709,0.00129983,0.001,0.001,0.00407091,0.001},
            {0.00112023,0.0011167,0.00112928,0.0153225,0.00105917,0.0349141,0.915933,0.001,0.0138403,0.001,0.00146041,0.00137121,0.00105833,0.001,0.0034254,0.00118586,0.001,0.00111141,0.001,0.001},
            {0.278809,0.00104123,0.00123219,0.001,0.00704168,0.0245102,0.128811,0.545498,0.001,0.00102195,0.00101077,0.00101056,0.001,0.001,0.001,0.00108885,0.001,0.001,0.00102079,0.001},
            {0.0434747,0.00120459,0.00119816,0.00106899,0.00100247,0.00103386,0.00111891,0.001,0.926261,0.001,0.00105216,0.00102617,0.00105984,0.00249981,0.00131667,0.0085048,0.00103134,0.00106639,0.00157503,0.00252767},
            {0.0876978,0.00127977,0.00118015,0.00108036,0.00100195,0.0155018,0.00894387,0.001,0.00105604,0.864093,0.0010851,0.00356453,0.00102453,0.00103839,0.00112066,0.00120282,0.001,0.0010415,0.0041326,0.00197866},
            {0.27963,0.001,0.001,0.00100275,0.001,0.001,0.001,0.001,0.001,0.001,0.699676,0.00269767,0.001,0.001,0.00100543,0.001,0.001,0.00100703,0.00103284,0.00215843},
            {0.695533,0.001,0.00206505,0.001,0.001,0.00279864,0.00312618,0.00185657,0.00320536,0.00229616,0.00163012,0.243623,0.00296355,0.00203359,0.001,0.001,0.001,0.00195308,0.00767669,0.0233194},
            {0.00117824,0.00115011,0.0191578,0.00109766,0.001,0.001,0.00104498,0.00305524,0.294525,0.001,0.00107541,0.00101566,0.665682,0.001,0.00101193,0.00120504,0.001,0.00112244,0.00103246,0.0016915},
            {0.00106738,0.368697,0.00101485,0.00101212,0.001,0.001,0.001,0.001,0.00100395,0.001,0.00102803,0.0028809,0.001,0.610022,0.001,0.00108558,0.001,0.00100972,0.001,0.00236208},
            {0.00102301,0.00108033,0.00107237,0.340658,0.001,0.001,0.001,0.001,0.00100361,0.001,0.00110879,0.001,0.00101493,0.001,0.640572,0.00106805,0.001,0.00154212,0.001,0.001},
            {0.0010106,0.928288,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.00121275,0.001,0.001,0.001,0.001,0.001,0.0537289,0.001,0.001,0.001,0.001},
            {0.00114828,0.00539045,0.00122201,0.145324,0.00102412,0.00107113,0.00113883,0.001,0.00108343,0.001,0.00111723,0.00223009,0.00108318,0.00105048,0.00118997,0.00124115,0.829325,0.00112166,0.00126858,0.00100404},
            {0.00100178,0.001,0.001,0.94914,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.00286403,0.001,0.001,0.00206493,0.001,0.001,0.0296558,0.001,0.00153162},
            {0.181894,0.00151219,0.00109798,0.0012413,0.00446756,0.001,0.0010426,0.00539373,0.00184963,0.00147171,0.00148022,0.00516152,0.00169216,0.00100464,0.00105488,0.00204821,0.00128829,0.00117436,0.780676,0.0034604},
            {0.0631616,0.00333308,0.00102753,0.00313459,0.0020645,0.001,0.00145947,0.001,0.00114237,0.001,0.00101584,0.357008,0.00100384,0.001,0.001,0.00100507,0.001,0.00128565,0.0149943,0.542487}};

    private final static double pi [] =  {0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04};



    private final static HmmPdfInterface [] obsModels = {
                new GaussianPdf(-0.003461, 0.500000,0),
                new GaussianPdf(2.197058,2.950140,0),
                new GaussianPdf(6.514493,6.937308,0),
                new GaussianPdf(-2.142475,2.504374,0),
                new GaussianPdf(-8.931893,5.793557,0),
                new GaussianPdf(16.987270,12.153178,0),
                new GaussianPdf(3.303155,5.900921,0),
                new GaussianPdf(25.522896,55.070175,0),
                new GaussianPdf(-2.045435,5.992779,0),
                new GaussianPdf(-9.375511,9.363085,0),
                new GaussianPdf(-5.453247,5.963502,0),
                new GaussianPdf(-5.161549,11.239450,0),
                new GaussianPdf(0.585102,13.392054,0),
                new GaussianPdf(-0.382519,23.311283,0),
                new GaussianPdf(-15.741991,14.881135,0),
                new GaussianPdf(10.162189,9.164228,0),
                new GaussianPdf(-11.109804,10.436027,0),
                new GaussianPdf(-7.916262,9.311233,0),
                new GaussianPdf(-22.183470,21.940117,0),
                new GaussianPdf(-14.893229,14.670548,0)};

    private static int numStates = 20;
    
    final HiddenMarkovModel hmm;

    private static double [] conditionalProbsOfMeInBed = {0.51,0.90,0.80,0.10,0.20,0.95,0.95,0.50,0.60,0.10,0.20,0.40,0.60,0.55,0.55,0.30,0.10,0.10,0.05,0.10};

    public PartnerHmm() {
        hmm = new HiddenMarkovModel(numStates,A,pi,obsModels,numStates*2);
    }

    public List<Double> getConditionalProbabiltiesOfMeBeingInBed() {

        List<Double> condProbs = Lists.newArrayList();

        for (int i = 0; i < conditionalProbsOfMeInBed.length; i++) {
            condProbs.add(conditionalProbsOfMeInBed[i]);
        }

        return condProbs;
    }


    public ImmutableList<Integer> decodeSensorData(final ImmutableList<Double>  durationDiffsIn5MinuteIntervals) {


        final double [][] x = new double[1][durationDiffsIn5MinuteIntervals.size()];

        for (int i = 0; i < durationDiffsIn5MinuteIntervals.size(); i++) {
            x[0][i] = durationDiffsIn5MinuteIntervals.get(i);
        }

        final Integer [] endStates = new Integer[1];
        endStates[0] = 0;

        final HmmDecodedResult result = hmm.decode(x, endStates);

        return result.bestPath;
    }


}
